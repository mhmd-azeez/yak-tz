// THIS FILE WAS GENERATED BY `xtp-go-bindgen`. DO NOT EDIT.
package main

import (
	"errors"
	pdk "github.com/extism/go-pdk"
)

//export handleMessage
func _handleMessage() int32 {
	var err error
	_ = err
	pdk.Log(pdk.LogDebug, "handleMessage: getting JSON input")
	var input Message
	err = pdk.InputJSON(&input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	pdk.Log(pdk.LogDebug, "handleMessage: calling implementation function")
	output, err := handleMessage(input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	pdk.Log(pdk.LogDebug, "handleMessage: setting JSON output")
	err = pdk.OutputJSON(output)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	pdk.Log(pdk.LogDebug, "handleMessage: returning")
	return 0
}

// Tells the application how to interpret this message.
type MessageType string

const (
	MessageTypeHtml  MessageType = "html"
	MessageTypeText  MessageType = "text"
	MessageTypeImage MessageType = "image"
)

func (v MessageType) String() string {
	switch v {
	case MessageTypeHtml:
		return `html`
	case MessageTypeText:
		return `text`
	case MessageTypeImage:
		return `image`
	default:
		return ""
	}
}

func stringToMessageType(s string) (MessageType, error) {
	switch s {
	case `html`:
		return MessageTypeHtml, nil
	case `text`:
		return MessageTypeText, nil
	case `image`:
		return MessageTypeImage, nil
	default:
		return MessageType(""), errors.New("unable to convert string to MessageType")
	}
}

// A message from the system
type Message struct {
	// The message body. Depends on the type
	Body string `json:"body"`
	// Tells the application how to interpret this message.
	Type MessageType `json:"type"`
	// The nickname of the originator of the message
	Nick *string `json:"nick"`
}

// Note: leave this in place, as the Go compiler will find the `export` function as the entrypoint.
func main() {}
